diff --git a/node_modules/starpc/dist/e2e/mock/mock.pb.d.ts b/node_modules/starpc/dist/e2e/mock/mock.pb.d.ts
index 2b59caf..a2e35d3 100644
--- a/node_modules/starpc/dist/e2e/mock/mock.pb.d.ts
+++ b/node_modules/starpc/dist/e2e/mock/mock.pb.d.ts
@@ -21,7 +21,7 @@ export declare const MockMsg: {
 /** Mock service mocks some RPCs for the e2e tests. */
 export interface Mock {
     /** MockRequest runs a mock unary request. */
-    MockRequest(request: MockMsg): Promise<MockMsg>;
+    MockRequest(request: MockMsg, abortSignal?: AbortSignal): Promise<MockMsg>;
 }
 export declare class MockClientImpl implements Mock {
     private readonly rpc;
@@ -29,7 +29,7 @@ export declare class MockClientImpl implements Mock {
     constructor(rpc: Rpc, opts?: {
         service?: string;
     });
-    MockRequest(request: MockMsg): Promise<MockMsg>;
+    MockRequest(request: MockMsg, abortSignal?: AbortSignal): Promise<MockMsg>;
 }
 /** Mock service mocks some RPCs for the e2e tests. */
 export type MockDefinition = typeof MockDefinition;
@@ -73,7 +73,7 @@ export declare const MockDefinition: {
     };
 };
 interface Rpc {
-    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
+    request(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): Promise<Uint8Array>;
 }
 type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
 export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
diff --git a/node_modules/starpc/dist/e2e/mock/mock.pb.js b/node_modules/starpc/dist/e2e/mock/mock.pb.js
index c4b4618..cc2f65c 100644
--- a/node_modules/starpc/dist/e2e/mock/mock.pb.js
+++ b/node_modules/starpc/dist/e2e/mock/mock.pb.js
@@ -77,9 +77,9 @@ export class MockClientImpl {
         this.rpc = rpc;
         this.MockRequest = this.MockRequest.bind(this);
     }
-    MockRequest(request) {
+    MockRequest(request, abortSignal) {
         const data = MockMsg.encode(request).finish();
-        const promise = this.rpc.request(this.service, 'MockRequest', data);
+        const promise = this.rpc.request(this.service, 'MockRequest', data, abortSignal || undefined);
         return promise.then((data) => MockMsg.decode(new _m0.Reader(data)));
     }
 }
diff --git a/node_modules/starpc/dist/echo/client-test.d.ts b/node_modules/starpc/dist/echo/client-test.d.ts
index 77e5ea9..19a39a6 100644
--- a/node_modules/starpc/dist/echo/client-test.d.ts
+++ b/node_modules/starpc/dist/echo/client-test.d.ts
@@ -1,3 +1,4 @@
 import { Client } from '../srpc/index.js';
 export declare function runClientTest(client: Client): Promise<void>;
+export declare function runAbortControllerTest(client: Client): Promise<void>;
 export declare function runRpcStreamTest(client: Client): Promise<void>;
diff --git a/node_modules/starpc/dist/echo/client-test.js b/node_modules/starpc/dist/echo/client-test.js
index e2a9d5b..5ae023d 100644
--- a/node_modules/starpc/dist/echo/client-test.js
+++ b/node_modules/starpc/dist/echo/client-test.js
@@ -1,4 +1,4 @@
-import { Client } from '../srpc/index.js';
+import { Client, ERR_RPC_ABORT } from '../srpc/index.js';
 import { EchoerClientImpl } from './echo.pb.js';
 import { pushable } from 'it-pushable';
 import { buildRpcStreamOpenStream } from '../rpcstream/rpcstream.js';
@@ -24,6 +24,30 @@ export async function runClientTest(client) {
         console.log('server: output', msg.body);
     }
 }
+// runAbortControllerTest tests aborting a RPC call.
+export async function runAbortControllerTest(client) {
+    const demoServiceClient = new EchoerClientImpl(client);
+    console.log('Testing EchoClientStream with AbortController...');
+    let errorReturned = false;
+    const clientAbort = new AbortController();
+    const clientNoopStream = pushable({ objectMode: true });
+    new Promise((resolve) => setTimeout(resolve, 1000)).then(() => {
+        clientAbort.abort();
+    });
+    try {
+        await demoServiceClient.EchoClientStream(clientNoopStream, clientAbort.signal);
+    }
+    catch (err) {
+        const errMsg = err.message;
+        errorReturned = true;
+        if (errMsg !== ERR_RPC_ABORT) {
+            throw new Error('unexpected error: ' + errMsg);
+        }
+    }
+    if (!errorReturned) {
+        throw new Error('expected aborted rpc to throw error');
+    }
+}
 // runRpcStreamTest tests a RPCStream.
 export async function runRpcStreamTest(client) {
     console.log('Calling RpcStream to open a RPC stream client...');
diff --git a/node_modules/starpc/dist/echo/echo.pb.d.ts b/node_modules/starpc/dist/echo/echo.pb.d.ts
index 01847da..b3d3f02 100644
--- a/node_modules/starpc/dist/echo/echo.pb.d.ts
+++ b/node_modules/starpc/dist/echo/echo.pb.d.ts
@@ -22,15 +22,15 @@ export declare const EchoMsg: {
 /** Echoer service returns the given message. */
 export interface Echoer {
     /** Echo returns the given message. */
-    Echo(request: EchoMsg): Promise<EchoMsg>;
+    Echo(request: EchoMsg, abortSignal?: AbortSignal): Promise<EchoMsg>;
     /** EchoServerStream is an example of a server -> client one-way stream. */
-    EchoServerStream(request: EchoMsg): AsyncIterable<EchoMsg>;
+    EchoServerStream(request: EchoMsg, abortSignal?: AbortSignal): AsyncIterable<EchoMsg>;
     /** EchoClientStream is an example of client->server one-way stream. */
-    EchoClientStream(request: AsyncIterable<EchoMsg>): Promise<EchoMsg>;
+    EchoClientStream(request: AsyncIterable<EchoMsg>, abortSignal?: AbortSignal): Promise<EchoMsg>;
     /** EchoBidiStream is an example of a two-way stream. */
-    EchoBidiStream(request: AsyncIterable<EchoMsg>): AsyncIterable<EchoMsg>;
+    EchoBidiStream(request: AsyncIterable<EchoMsg>, abortSignal?: AbortSignal): AsyncIterable<EchoMsg>;
     /** RpcStream opens a nested rpc call stream. */
-    RpcStream(request: AsyncIterable<RpcStreamPacket>): AsyncIterable<RpcStreamPacket>;
+    RpcStream(request: AsyncIterable<RpcStreamPacket>, abortSignal?: AbortSignal): AsyncIterable<RpcStreamPacket>;
 }
 export declare class EchoerClientImpl implements Echoer {
     private readonly rpc;
@@ -38,11 +38,11 @@ export declare class EchoerClientImpl implements Echoer {
     constructor(rpc: Rpc, opts?: {
         service?: string;
     });
-    Echo(request: EchoMsg): Promise<EchoMsg>;
-    EchoServerStream(request: EchoMsg): AsyncIterable<EchoMsg>;
-    EchoClientStream(request: AsyncIterable<EchoMsg>): Promise<EchoMsg>;
-    EchoBidiStream(request: AsyncIterable<EchoMsg>): AsyncIterable<EchoMsg>;
-    RpcStream(request: AsyncIterable<RpcStreamPacket>): AsyncIterable<RpcStreamPacket>;
+    Echo(request: EchoMsg, abortSignal?: AbortSignal): Promise<EchoMsg>;
+    EchoServerStream(request: EchoMsg, abortSignal?: AbortSignal): AsyncIterable<EchoMsg>;
+    EchoClientStream(request: AsyncIterable<EchoMsg>, abortSignal?: AbortSignal): Promise<EchoMsg>;
+    EchoBidiStream(request: AsyncIterable<EchoMsg>, abortSignal?: AbortSignal): AsyncIterable<EchoMsg>;
+    RpcStream(request: AsyncIterable<RpcStreamPacket>, abortSignal?: AbortSignal): AsyncIterable<RpcStreamPacket>;
 }
 /** Echoer service returns the given message. */
 export type EchoerDefinition = typeof EchoerDefinition;
@@ -316,10 +316,10 @@ export declare const EchoerDefinition: {
     };
 };
 interface Rpc {
-    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
-    clientStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>): Promise<Uint8Array>;
-    serverStreamingRequest(service: string, method: string, data: Uint8Array): AsyncIterable<Uint8Array>;
-    bidirectionalStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>): AsyncIterable<Uint8Array>;
+    request(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): Promise<Uint8Array>;
+    clientStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>, abortSignal?: AbortSignal): Promise<Uint8Array>;
+    serverStreamingRequest(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): AsyncIterable<Uint8Array>;
+    bidirectionalStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>, abortSignal?: AbortSignal): AsyncIterable<Uint8Array>;
 }
 type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
 export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
diff --git a/node_modules/starpc/dist/echo/echo.pb.js b/node_modules/starpc/dist/echo/echo.pb.js
index a0117c5..b87eac2 100644
--- a/node_modules/starpc/dist/echo/echo.pb.js
+++ b/node_modules/starpc/dist/echo/echo.pb.js
@@ -82,29 +82,29 @@ export class EchoerClientImpl {
         this.EchoBidiStream = this.EchoBidiStream.bind(this);
         this.RpcStream = this.RpcStream.bind(this);
     }
-    Echo(request) {
+    Echo(request, abortSignal) {
         const data = EchoMsg.encode(request).finish();
-        const promise = this.rpc.request(this.service, 'Echo', data);
+        const promise = this.rpc.request(this.service, 'Echo', data, abortSignal || undefined);
         return promise.then((data) => EchoMsg.decode(new _m0.Reader(data)));
     }
-    EchoServerStream(request) {
+    EchoServerStream(request, abortSignal) {
         const data = EchoMsg.encode(request).finish();
-        const result = this.rpc.serverStreamingRequest(this.service, 'EchoServerStream', data);
+        const result = this.rpc.serverStreamingRequest(this.service, 'EchoServerStream', data, abortSignal || undefined);
         return EchoMsg.decodeTransform(result);
     }
-    EchoClientStream(request) {
+    EchoClientStream(request, abortSignal) {
         const data = EchoMsg.encodeTransform(request);
-        const promise = this.rpc.clientStreamingRequest(this.service, 'EchoClientStream', data);
+        const promise = this.rpc.clientStreamingRequest(this.service, 'EchoClientStream', data, abortSignal || undefined);
         return promise.then((data) => EchoMsg.decode(new _m0.Reader(data)));
     }
-    EchoBidiStream(request) {
+    EchoBidiStream(request, abortSignal) {
         const data = EchoMsg.encodeTransform(request);
-        const result = this.rpc.bidirectionalStreamingRequest(this.service, 'EchoBidiStream', data);
+        const result = this.rpc.bidirectionalStreamingRequest(this.service, 'EchoBidiStream', data, abortSignal || undefined);
         return EchoMsg.decodeTransform(result);
     }
-    RpcStream(request) {
+    RpcStream(request, abortSignal) {
         const data = RpcStreamPacket.encodeTransform(request);
-        const result = this.rpc.bidirectionalStreamingRequest(this.service, 'RpcStream', data);
+        const result = this.rpc.bidirectionalStreamingRequest(this.service, 'RpcStream', data, abortSignal || undefined);
         return RpcStreamPacket.decodeTransform(result);
     }
 }
diff --git a/node_modules/starpc/dist/integration/integration.js b/node_modules/starpc/dist/integration/integration.js
index 6ce64ac..80c203b 100644
--- a/node_modules/starpc/dist/integration/integration.js
+++ b/node_modules/starpc/dist/integration/integration.js
@@ -1,5 +1,5 @@
 import { WebSocketConn } from '../srpc/websocket.js';
-import { runClientTest, runRpcStreamTest } from '../echo/client-test.js';
+import { runClientTest, runRpcStreamTest, runAbortControllerTest, } from '../echo/client-test.js';
 import WebSocket from 'isomorphic-ws';
 async function runRPC() {
     const addr = 'ws://localhost:5000/demo';
@@ -7,16 +7,22 @@ async function runRPC() {
     const ws = new WebSocket(addr);
     const channel = new WebSocketConn(ws, 'outbound');
     const client = channel.buildClient();
-    console.log('Running client test via WebSocket..');
-    await runClientTest(client);
     console.log('Running RpcStream test via WebSocket..');
     await runRpcStreamTest(client);
+    console.log('Running client test via WebSocket..');
+    await runClientTest(client);
+    console.log('Running abort controller test via WebSocket..');
+    await runAbortControllerTest(client);
 }
+process.on('unhandledRejection', (ev) => {
+    console.error('Unhandled rejection', ev);
+    throw ev;
+});
 runRPC()
     .then(() => {
     process.exit(0);
 })
     .catch((err) => {
-    console.error(err);
+    console.error('runRPC threw error', err);
     process.exit(1);
 });
diff --git a/node_modules/starpc/dist/rpcstream/rpcstream.js b/node_modules/starpc/dist/rpcstream/rpcstream.js
index 64023e1..6d0f500 100644
--- a/node_modules/starpc/dist/rpcstream/rpcstream.js
+++ b/node_modules/starpc/dist/rpcstream/rpcstream.js
@@ -81,11 +81,9 @@ export async function* handleRpcStream(packetStream, getter) {
     }
     // build the outgoing packet sink & the packet source
     const packetSink = pushable({ objectMode: true });
-    // handle the stream in the next event queue tick.
+    // start the handler
     const rpcStream = new RpcStream(packetSink, packetStream);
-    setTimeout(() => {
-        handler(rpcStream);
-    }, 1);
+    handler(rpcStream);
     // process packets
     for await (const packet of packetSink) {
         yield* [packet];
diff --git a/node_modules/starpc/dist/srpc/client.d.ts b/node_modules/starpc/dist/srpc/client.d.ts
index 0f91a13..7541fdd 100644
--- a/node_modules/starpc/dist/srpc/client.d.ts
+++ b/node_modules/starpc/dist/srpc/client.d.ts
@@ -4,9 +4,9 @@ export declare class Client implements TsProtoRpc {
     private openStreamCtr;
     constructor(openStreamFn?: OpenStreamFunc);
     setOpenStreamFn(openStreamFn?: OpenStreamFunc): void;
-    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
-    clientStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>): Promise<Uint8Array>;
-    serverStreamingRequest(service: string, method: string, data: Uint8Array): AsyncIterable<Uint8Array>;
-    bidirectionalStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>): AsyncIterable<Uint8Array>;
+    request(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): Promise<Uint8Array>;
+    clientStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>, abortSignal?: AbortSignal): Promise<Uint8Array>;
+    serverStreamingRequest(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): AsyncIterable<Uint8Array>;
+    bidirectionalStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>, abortSignal?: AbortSignal): AsyncIterable<Uint8Array>;
     private startRpc;
 }
diff --git a/node_modules/starpc/dist/srpc/client.js b/node_modules/starpc/dist/srpc/client.js
index 5466a5c..708204b 100644
--- a/node_modules/starpc/dist/srpc/client.js
+++ b/node_modules/starpc/dist/srpc/client.js
@@ -1,5 +1,6 @@
 import { pipe } from 'it-pipe';
 import { pushable } from 'it-pushable';
+import { ERR_RPC_ABORT } from './errors.js';
 import { ClientRPC } from './client-rpc.js';
 import { writeToPushable } from './pushable.js';
 import { decodePacketSource, encodePacketSource, parseLengthPrefixTransform, prependLengthPrefixTransform, } from './packet.js';
@@ -15,8 +16,8 @@ export class Client {
         this.openStreamCtr.set(openStreamFn || undefined);
     }
     // request starts a non-streaming request.
-    async request(service, method, data) {
-        const call = await this.startRpc(service, method, data);
+    async request(service, method, data, abortSignal) {
+        const call = await this.startRpc(service, method, data, abortSignal);
         for await (const data of call.rpcDataSource) {
             call.close();
             return data;
@@ -26,8 +27,8 @@ export class Client {
         throw err;
     }
     // clientStreamingRequest starts a client side streaming request.
-    async clientStreamingRequest(service, method, data) {
-        const call = await this.startRpc(service, method, null);
+    async clientStreamingRequest(service, method, data, abortSignal) {
+        const call = await this.startRpc(service, method, null, abortSignal);
         call.writeCallDataFromSource(data);
         for await (const data of call.rpcDataSource) {
             call.close();
@@ -38,9 +39,9 @@ export class Client {
         throw err;
     }
     // serverStreamingRequest starts a server-side streaming request.
-    serverStreamingRequest(service, method, data) {
+    serverStreamingRequest(service, method, data, abortSignal) {
         const serverData = pushable({ objectMode: true });
-        this.startRpc(service, method, data)
+        this.startRpc(service, method, data, abortSignal)
             .then(async (call) => {
             return writeToPushable(call.rpcDataSource, serverData);
         })
@@ -48,9 +49,9 @@ export class Client {
         return serverData;
     }
     // bidirectionalStreamingRequest starts a two-way streaming request.
-    bidirectionalStreamingRequest(service, method, data) {
+    bidirectionalStreamingRequest(service, method, data, abortSignal) {
         const serverData = pushable({ objectMode: true });
-        this.startRpc(service, method, null)
+        this.startRpc(service, method, null, abortSignal)
             .then(async (call) => {
             call.writeCallDataFromSource(data);
             try {
@@ -69,10 +70,16 @@ export class Client {
     // startRpc is a common utility function to begin a rpc call.
     // throws any error starting the rpc call
     // if data == null and data.length == 0, sends a separate data packet.
-    async startRpc(rpcService, rpcMethod, data) {
+    async startRpc(rpcService, rpcMethod, data, abortSignal) {
+        if (abortSignal?.aborted) {
+            throw new Error(ERR_RPC_ABORT);
+        }
         const openStreamFn = await this.openStreamCtr.wait();
         const conn = await openStreamFn();
         const call = new ClientRPC(rpcService, rpcMethod);
+        abortSignal?.addEventListener('abort', () => {
+            call.close(new Error(ERR_RPC_ABORT));
+        });
         pipe(conn, parseLengthPrefixTransform(), combineUint8ArrayListTransform(), decodePacketSource, call, encodePacketSource, prependLengthPrefixTransform(), conn);
         await call.writeCallStart(data || undefined);
         return call;
diff --git a/node_modules/starpc/dist/srpc/common-rpc.js b/node_modules/starpc/dist/srpc/common-rpc.js
index c339f1f..caeecc9 100644
--- a/node_modules/starpc/dist/srpc/common-rpc.js
+++ b/node_modules/starpc/dist/srpc/common-rpc.js
@@ -39,9 +39,9 @@ export class CommonRPC {
     async writeCallDataFromSource(dataSource) {
         try {
             for await (const data of dataSource) {
-                this.writeCallData(data);
+                await this.writeCallData(data);
             }
-            this.writeCallData(undefined, true);
+            await this.writeCallData(undefined, true);
         }
         catch (err) {
             this.close(err);
@@ -117,7 +117,8 @@ export class CommonRPC {
         }
         finally {
             this._rpcDataSource.end(err);
-            this._source.end(err);
+            // note: don't pass error to _source here.
+            this._source.end();
         }
     }
     // _createSink returns a value for the sink field.
diff --git a/node_modules/starpc/dist/srpc/errors.d.ts b/node_modules/starpc/dist/srpc/errors.d.ts
new file mode 100644
index 0000000..071cc98
--- /dev/null
+++ b/node_modules/starpc/dist/srpc/errors.d.ts
@@ -0,0 +1,2 @@
+export declare const ERR_RPC_ABORT = "ERR_RPC_ABORT";
+export declare function isAbortError(err: unknown): boolean;
diff --git a/node_modules/starpc/dist/srpc/errors.js b/node_modules/starpc/dist/srpc/errors.js
new file mode 100644
index 0000000..b798848
--- /dev/null
+++ b/node_modules/starpc/dist/srpc/errors.js
@@ -0,0 +1,10 @@
+// ERR_RPC_ABORT is returned if the RPC was aborted.
+export const ERR_RPC_ABORT = 'ERR_RPC_ABORT';
+// isAbortError checks if the error object is ERR_RPC_ABORT.
+export function isAbortError(err) {
+    if (typeof err !== 'object') {
+        return false;
+    }
+    const message = err.message;
+    return message === ERR_RPC_ABORT;
+}
diff --git a/node_modules/starpc/dist/srpc/index.d.ts b/node_modules/starpc/dist/srpc/index.d.ts
index a782bc0..7825ab2 100644
--- a/node_modules/starpc/dist/srpc/index.d.ts
+++ b/node_modules/starpc/dist/srpc/index.d.ts
@@ -1,4 +1,5 @@
 export type { PacketHandler, Stream, OpenStreamFunc } from './stream.js';
+export { ERR_RPC_ABORT, isAbortError } from './errors.js';
 export { Client } from './client.js';
 export { Server } from './server.js';
 export { Conn, ConnParams } from './conn.js';
diff --git a/node_modules/starpc/dist/srpc/index.js b/node_modules/starpc/dist/srpc/index.js
index 4338917..34dc46d 100644
--- a/node_modules/starpc/dist/srpc/index.js
+++ b/node_modules/starpc/dist/srpc/index.js
@@ -1,3 +1,4 @@
+export { ERR_RPC_ABORT, isAbortError } from './errors.js';
 export { Client } from './client.js';
 export { Server } from './server.js';
 export { Conn } from './conn.js';
diff --git a/node_modules/starpc/dist/srpc/ts-proto-rpc.d.ts b/node_modules/starpc/dist/srpc/ts-proto-rpc.d.ts
index 4fd5b23..2a84ff3 100644
--- a/node_modules/starpc/dist/srpc/ts-proto-rpc.d.ts
+++ b/node_modules/starpc/dist/srpc/ts-proto-rpc.d.ts
@@ -1,6 +1,6 @@
 export interface TsProtoRpc {
-    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
-    clientStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>): Promise<Uint8Array>;
-    serverStreamingRequest(service: string, method: string, data: Uint8Array): AsyncIterable<Uint8Array>;
-    bidirectionalStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>): AsyncIterable<Uint8Array>;
+    request(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): Promise<Uint8Array>;
+    clientStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>, abortSignal?: AbortSignal): Promise<Uint8Array>;
+    serverStreamingRequest(service: string, method: string, data: Uint8Array, abortSignal?: AbortSignal): AsyncIterable<Uint8Array>;
+    bidirectionalStreamingRequest(service: string, method: string, data: AsyncIterable<Uint8Array>, abortSignal?: AbortSignal): AsyncIterable<Uint8Array>;
 }
