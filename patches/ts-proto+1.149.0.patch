diff --git a/node_modules/ts-proto/build/generate-services.js b/node_modules/ts-proto/build/generate-services.js
index 1bd8e78..5c1ae73 100644
--- a/node_modules/ts-proto/build/generate-services.js
+++ b/node_modules/ts-proto/build/generate-services.js
@@ -146,8 +146,13 @@ function generateRegularRpcMethod(ctx, methodDesc) {
 function generateServiceClientImpl(ctx, fileDesc, serviceDesc) {
     const { options } = ctx;
     const chunks = [];
-    // Define the FooServiceImpl class
+    // Determine information about the service.
     const { name } = serviceDesc;
+    const serviceID = (0, utils_1.maybePrefixPackage)(fileDesc, serviceDesc.name);
+    // Define the service ID constant.
+    const serviceIDConst = `${name}ServiceID`;
+    chunks.push((0, ts_poet_1.code) `export const ${serviceIDConst} = "${serviceID}";`);
+    // Define the FooServiceImpl class
     const i = options.context ? `${name}<Context>` : name;
     const t = options.context ? `<${main_1.contextTypeVar}>` : "";
     chunks.push((0, ts_poet_1.code) `export class ${name}ClientImpl${t} implements ${(0, ts_poet_1.def)(i)} {`);
@@ -156,8 +161,7 @@ function generateServiceClientImpl(ctx, fileDesc, serviceDesc) {
     chunks.push((0, ts_poet_1.code) `private readonly rpc: ${rpcType};`);
     chunks.push((0, ts_poet_1.code) `private readonly service: string;`);
     chunks.push((0, ts_poet_1.code) `constructor(rpc: ${rpcType}, opts?: {service?: string}) {`);
-    const serviceID = (0, utils_1.maybePrefixPackage)(fileDesc, serviceDesc.name);
-    chunks.push((0, ts_poet_1.code) `this.service = opts?.service || "${serviceID}";`);
+    chunks.push((0, ts_poet_1.code) `this.service = opts?.service || ${serviceIDConst};`);
     chunks.push((0, ts_poet_1.code) `this.rpc = rpc;`);
     // Bind each FooService method to the FooServiceImpl class
     for (const methodDesc of serviceDesc.method) {
